import { jwtDecode } from 'jwt-decode';

interface JwtPayload {
  sub?: string;
  role?: string;
  exp?: number;
  [key: string]: any;
}

/**
 * L·∫•y th√¥ng tin user t·ª´ JWT token
 */
export const getUserFromToken = (): { username: string | null; role: string | null; isValid: boolean } => {
  const token = localStorage.getItem('accessToken') || sessionStorage.getItem('accessToken');
  
  if (!token) {
    return { username: null, role: null, isValid: false };
  }

  try {
    const decoded = jwtDecode<JwtPayload>(token);
    
    // Ki·ªÉm tra token c√≥ h·∫øt h·∫°n kh√¥ng
    if (decoded.exp && decoded.exp * 1000 < Date.now()) {
      return { username: null, role: null, isValid: false };
    }

    return {
      username: decoded.sub || null,
      role: decoded.role || null,
      isValid: true
    };
  } catch (error) {
    console.error('Token kh√¥ng h·ª£p l·ªá:', error);
    return { username: null, role: null, isValid: false };
  }
};

/**
 * Ki·ªÉm tra user c√≥ ph·∫£i admin kh√¥ng
 */
export const isAdmin = (): boolean => {
  const { role, isValid } = getUserFromToken();
  return isValid && (role === 'admin' || role === 'ADMIN');
};

/**
 * Ki·ªÉm tra user c√≥ quy·ªÅn truy c·∫≠p kh√¥ng
 */
export const hasPermission = (requiredRole: 'admin' | 'user' | 'all'): boolean => {
  if (requiredRole === 'all') return true;
  
  const { role, isValid } = getUserFromToken();
  if (!isValid) return false;
  
  // H·ªó tr·ª£ c·∫£ ch·ªØ hoa v√† ch·ªØ th∆∞·ªùng
  if (requiredRole === 'admin') {
    return role === 'admin' || role === 'ADMIN';
  }
  
  return role === requiredRole;
};

/**
 * L·∫•y username t·ª´ token
 */
export const getUsername = (): string | null => {
  const { username } = getUserFromToken();
  return username;
};

/**
 * L·∫•y role t·ª´ token
 */
export const getRole = (): string | null => {
  const { role } = getUserFromToken();
  return role;
};

/**
 * Ki·ªÉm tra token c√≥ h·ª£p l·ªá kh√¥ng
 */
export const isTokenValid = (): boolean => {
  const { isValid } = getUserFromToken();
  return isValid;
};

/**
 * X√≥a t·∫•t c·∫£ th√¥ng tin auth
 */
export const clearAuthData = (): void => {
  localStorage.removeItem('accessToken');
  localStorage.removeItem('refreshToken');
  localStorage.removeItem('userRole');
  localStorage.removeItem('userData');
  sessionStorage.removeItem('accessToken');
  sessionStorage.removeItem('refreshToken');
  sessionStorage.removeItem('current_session');
}; 

/**
 * Debug function ƒë·ªÉ ki·ªÉm tra token
 */
export const debugToken = () => {
  const token = localStorage.getItem('accessToken') || sessionStorage.getItem('accessToken');
  
  if (!token) {
    console.log('‚ùå Kh√¥ng t√¨m th·∫•y token');
    return;
  }

  try {
    const decoded = jwtDecode<JwtPayload>(token);
    console.log('üîç Token decoded:', decoded);
    console.log('üë§ Username:', decoded.sub);
    console.log('üîë Role:', decoded.role);
    console.log('‚è∞ Expires:', new Date(decoded.exp! * 1000).toLocaleString());
    console.log('‚úÖ Token h·ª£p l·ªá:', decoded.exp! * 1000 > Date.now());
    console.log('üëë Is Admin:', decoded.role === 'admin' || decoded.role === 'ADMIN');
  } catch (error) {
    console.error('‚ùå Token kh√¥ng h·ª£p l·ªá:', error);
  }
}; 